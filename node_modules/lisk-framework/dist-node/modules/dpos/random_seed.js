"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lisk_cryptography_1 = require("@liskhq/lisk-cryptography");
const createDebug = require("debug");
const debug = createDebug('lisk:dpos:random_seed');
const NUMBER_BYTE_SIZE = 4;
const RANDOM_SEED_BYTE_SIZE = 16;
const strippedHash = (data) => {
    if (!(data instanceof Buffer)) {
        throw new Error('Hash input is not a valid type');
    }
    return lisk_cryptography_1.hash(data).slice(0, RANDOM_SEED_BYTE_SIZE);
};
const bitwiseXOR = (bufferArray) => {
    if (bufferArray.length === 1) {
        return bufferArray[0];
    }
    const bufferSizes = new Set(bufferArray.map(buffer => buffer.length));
    if (bufferSizes.size > 1) {
        throw new Error('All input for XOR should be same size');
    }
    const outputSize = [...bufferSizes][0];
    const result = Buffer.alloc(outputSize, 0);
    for (let i = 0; i < outputSize; i += 1) {
        result[i] = bufferArray.map(b => b[i]).reduce((a, b) => a ^ b, 0);
    }
    return result;
};
const findPreviousHeaderOfDelegate = (header, searchTillHeight, headersMap) => {
    const { height, generatorPublicKey } = header;
    const searchTill = Math.max(searchTillHeight, 1);
    for (let i = height - 1; i >= searchTill; i -= 1) {
        if (headersMap[i].generatorPublicKey.equals(generatorPublicKey)) {
            return headersMap[i];
        }
    }
    return undefined;
};
const isValidSeedReveal = (seedReveal, previousSeedReveal) => strippedHash(seedReveal).equals(previousSeedReveal);
const selectSeedReveals = ({ fromHeight, toHeight, headersMap, rounds, }) => {
    const selected = [];
    for (let i = fromHeight; i >= toHeight; i -= 1) {
        const header = headersMap[i];
        const blockRound = rounds.calcRound(header.height);
        const lastForgedBlock = findPreviousHeaderOfDelegate(header, rounds.calcRoundStartHeight(blockRound - 1), headersMap);
        if (!lastForgedBlock) {
            continue;
        }
        if (!isValidSeedReveal(header.asset.seedReveal, lastForgedBlock.asset.seedReveal)) {
            continue;
        }
        selected.push(header.asset.seedReveal);
    }
    return selected;
};
exports.generateRandomSeeds = (round, rounds, headers) => {
    const middleThreshold = Math.floor(rounds.blocksPerRound / 2);
    const lastBlockHeight = headers[0].height;
    const startOfRound = rounds.calcRoundStartHeight(round);
    const middleOfRound = rounds.calcRoundMiddleHeight(round);
    const startOfLastRound = rounds.calcRoundStartHeight(round - 1);
    const endOfLastRound = rounds.calcRoundEndHeight(round - 1);
    const startOfSecondLastRound = rounds.calcRoundStartHeight(round - 2);
    if (lastBlockHeight < middleOfRound) {
        throw new Error(`Random seed can't be calculated earlier in a round. Wait till you pass middle of round. Current height: ${lastBlockHeight.toString()}`);
    }
    if (round === 1) {
        debug('Returning static value because current round is 1');
        const randomSeed1ForFirstRound = strippedHash(lisk_cryptography_1.intToBuffer(middleThreshold + 1, NUMBER_BYTE_SIZE));
        const randomSeed2ForFirstRound = strippedHash(lisk_cryptography_1.intToBuffer(0, NUMBER_BYTE_SIZE));
        return [randomSeed1ForFirstRound, randomSeed2ForFirstRound];
    }
    const headersMap = headers.reduce((acc, header) => {
        if (header.height >= startOfSecondLastRound && header.height <= middleOfRound) {
            acc[header.height] = header;
        }
        return acc;
    }, {});
    debug('Fetching seed reveals for random seed 1', {
        fromHeight: startOfRound + middleThreshold,
        toHeight: startOfRound - middleThreshold,
    });
    const seedRevealsForRandomSeed1 = selectSeedReveals({
        fromHeight: startOfRound + middleThreshold,
        toHeight: startOfRound - middleThreshold,
        headersMap,
        rounds,
    });
    debug('Fetching seed reveals for random seed 2', {
        fromHeight: endOfLastRound,
        toHeight: startOfLastRound,
    });
    const seedRevealsForRandomSeed2 = selectSeedReveals({
        fromHeight: endOfLastRound,
        toHeight: startOfLastRound,
        headersMap,
        rounds,
    });
    const randomSeed1 = bitwiseXOR([
        strippedHash(lisk_cryptography_1.intToBuffer(startOfRound + middleThreshold, NUMBER_BYTE_SIZE)),
        ...seedRevealsForRandomSeed1,
    ]);
    const randomSeed2 = bitwiseXOR([
        strippedHash(lisk_cryptography_1.intToBuffer(endOfLastRound, NUMBER_BYTE_SIZE)),
        ...seedRevealsForRandomSeed2,
    ]);
    return [randomSeed1, randomSeed2];
};
//# sourceMappingURL=random_seed.js.map